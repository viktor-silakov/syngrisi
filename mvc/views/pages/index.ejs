<!doctype html>
<html lang="en" xmlns:width="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="icon" href="../../../static/icons/leaf_logo.svg">
<!--    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css"-->
<!--          integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp"-->
<!--          crossorigin="anonymous">-->
    <link rel="stylesheet" href="/static/fa/css/all.min.css">
<!--    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css"-->
<!--          integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB"-->
<!--          crossorigin="anonymous">-->
    <link rel="stylesheet" href="../../../static/css/common.css">
    <link rel="stylesheet" href="../../../static/css/colors.css">
    <link rel="stylesheet" href="../../../static/font/bootstrap-icons.css">
    <script src="../../../static/js/ejs.js"></script>
    <script src="../../../static/js/Please.js"></script>
    <script src="../../../static/js/moment.min.js"></script>
    <script src="../../../static/js/mark.min.js"></script>
    <script src="lib/gridHelpers.js"></script>
    <script src="./static/js/popper.min.js"></script>



<% if(currentSuite) { %>
        <title>Syngrisi list of checks - <%= currentSuite.name %> </title>
    <% } else if (opts.filter_name_regex) { %>
        <title>Syngrisi search results for - <%= opts.filter_name_regex %> </title>
    <% }else{ %>
        <title>Syngrisi list of checks - all suites</title>
    <% } %>
</head>
<body class="bg-light pl-0" style="max-height: 100vh; min-height: 100vh; min-width: 97.8vw; max-width: 98.9vw">

<div name="main" class="main pl-0 pr-0 ml-3 mr-0 d-inline-block bg-light"
     style="min-height: 100vh; max-width: 100%; min-width: 100%">
    <div name="page-head" class="row pb-0 bg-olive mr-0" style="margin-right: -16px; margin-left: -16px">
        <%- include('components/header') %>
    </div>

    <!--    DATA GRID START    -->
    <div class="all-table row mh-100 mr-0">
        <!--   SIDEBAR    -->
        <div name="sidebar"
             class="sidebar col-2-5 pl-0 pr-0 mh-100 bg-light border-top border-right1 border-silver float-left w-251 ml-0 mr-0"
             style="width: 100px; min-height: 100vh">
            <!--   SUITES CONTROL PANEL-->
            <div class="m-0 row pl-0 pt-0 pr-0 bg-light text-secondary">
                <div class="pl-0 pr-0 col suites-toolbar-wrapper ">
                    <%- include('components/suites_toolbar.ejs') %>
                </div>
            </div>
            <!--   SUITES LIST-->
            <div class="suites-list m-0 row pl-0 pt-1 bg-light text-secondary" style="height: 100vh">
                <ul class="col pr-0 pl-0">
                    <% let items = suites %>
                    <%- include('components/sidebar_items', {items: suites, currentItem: currentSuite}) %>
                </ul>
            </div>
            <!--  /SUITES LIST-->
        </div>
        <!--   TESTS TABLE-->
        <div name class="table-rows content col float-right pr-0-5 pl-0" id="wrapper">
            <%- include('components/subheader_title', {currentItem: currentSuite}) %>
            <div class=".container-fluid table-container pl-0 pr-0 m-0">
                <%- include('components/tests_table_headers2', {}) %>
                <row name="tests-end" id="tests-table-end">

                </row>
            </div>

        </div>
    </div>
</div>

<script>
    async function generateApiKey() {
        if (!confirmation('After generate the Api Key, you MUST reconfigure the solution. Are you sure?')) return;
        await getRequest('/apikey')
            .then((result) => {
                return showNotification(JSON.parse(result).apikey, 'SuccessInput', 1000 * 40);
            })
            .catch((e) => {
                console.log('error api key generation: ' + e);
                return showNotification(e, 'Error', 1000 * 60);
            });
    }

    function paramsToObject(entries) {
        const result = {};
        for (const [key, value] of entries) { // each 'entry' is a [key, value] tupple
            result[key] = value;
        }
        return result;
    }

    const queryObject = paramsToObject(window.location.search);

    function getSearchForPageDataPulling(searchObject) {

        if (!searchObject) return '';

        const allowed = ['sort', 'page', 'filter'];

        const checker = value =>
            allowed.some(element => value.includes(element));

        const filteredSearch = Object.keys(searchObject)
            .filter(checker)
            .reduce((obj, key) => {
                obj[key] = searchObject[key];
                return obj;
            }, {});
        const searchForDataPulling = objectToSearch(filteredSearch);
        return '?' + searchForDataPulling;
    }

    function renderNextPage(page) {
        return new Promise(async function (resolve, reject) {

            // add page=1 if empty
            const searchObject0 = searchToObject(window.location.search);
            // console.log({ searchObject0 });
            if (searchObject0 == null || (searchObject0 && !searchObject0.page)) {
                const updatedSearch0 = updateQueryParam('page', 1, window.location.search);
                updateUrlWithoutReloading(null, null, document.location.origin + updatedSearch0);
            }

            // prepare search URI part and get json data
            const searchObject = searchToObject(window.location.search);

            if (page) {
                searchObject.page = parseInt(page);
            }
            const searchForDataPulling = getSearchForPageDataPulling(searchObject);
            // console.log({searchForDataPulling});
            window.removeEventListener('scroll', scroller);
            let json = await getRequest(`/checks${searchForDataPulling}`);
            // console.log(json);
            window.addEventListener('scroll', scroller);

            // prepare testHTML using ejs template and obtained json data
            const checksByTestGroupedByIdent = JSON.parse(json);
            // console.log({ checksByTestGroupedByIdent });
            let options = { delimiter: '?' };
            const pageTemplate = await getRequest('../../../static/ejs/tests_table_rows.ejs');
            let testsHtml = '<div class="test-page-wrapper row ml-0 mr-0">' + ejs.render(pageTemplate, {
                checksByTestGroupedByIdent: checksByTestGroupedByIdent
            }, options) + '</div>';

            // insert HTML
            document.getElementById('tests-table-end')
                .insertAdjacentHTML('beforebegin', testsHtml);

            let pageNum;
            if (searchObject) {
                // pageNum = (searchObject.page && parseInt(searchObject.page) !== 1) ? (parseInt(searchObject.page) + 1) : 1
                pageNum = (searchObject.page) ? (parseInt(searchObject.page) + 1) : 1;
            } else {
                pageNum = 1;
            }

            const updatedSearch = updateQueryParam('page', pageNum, window.location.search);
            if (json === '{}') {
                window.removeEventListener('scroll', scroller);
                return resolve(json);
            } else {
                updateUrlWithoutReloading(null, null, document.location.origin + updatedSearch);
                return resolve(json);
            }
        });
    }

    async function scroller() {
        console.log('scroller');
        let lastScroll = 0;

        // function () {
        let currentScroll = document.documentElement.scrollTop || document.body.scrollTop; // Get Current Scroll Value

        if (currentScroll > 0 && lastScroll <= currentScroll) {
            await renderNextPage();
            lastScroll = currentScroll;
        } else {
            lastScroll = currentScroll;
        }
    }

    async function firstPaginatorLoad() {
        const searchObject = searchToObject(window.location.search);
        let pageNum;
        // load all pages that are in query like: 'page=10'
        if (searchObject && searchObject.page > 1) {
            console.log('preload pages > 1');

            pageNum = parseInt(searchObject.page);
            const pagesArray = Array.from(Array(pageNum)
                .keys());
            for (const i of pagesArray) {
                await renderNextPage(i + 1);
            }
        } else {
            // just load few pages to enable scroll, because there is no way to trigger scroll event otherwise
            console.log('preload pages');
            for (const i of Array.from(Array(3)
                .keys())) {
                // console.log({ i });
                await renderNextPage();
            }
        }
    }

    window.onload = function () {
        firstPaginatorLoad();

        // EVENTS
        window.addEventListener('scroll', scroller);

        // draw preview after collapse event fired
        jQuery(document)
            .on('shown.bs.collapse', function (e) {
                const testId = e.target.id.replace('testchecks_', '');
                drawTestChecksPreviews(testId);
            });

        jQuery(document)
            .on('click', 'canvas', function (e) {
                openDiffView(e);
            });

        jQuery(document)
            .on('click', '.test-input', function (e) {
                console.log({e})
            });

        jQuery(document)
            .on('mouseover', '[data-toggle="tooltip"]', (e) => {
                // console.log({ TARGET: e.target });
                $(e.target)
                    .tooltip({
                        animation: true,
                        delay: {
                            show: 0,
                            hide: 100
                        },
                        trigger: 'manual'
                    });
                $(e.target)
                    .tooltip('show');
            });
        jQuery(document)
            .on('mouseout', '[data-toggle="tooltip"]', (e) => {
                // console.log({ TARGETOUT: e.target });
                $(e.target)
                    .tooltip('hide');
            });
    };

</script>

<!--NOTIFY BOX-->
<div id="notify" role="alert" aria-live="assertive" aria-atomic="true"
     class="fixed-bottom-right bg-light m-1 border rounded toast fade show"
     data-autohide="false"
     style="display: none"
>
    <div class="toast-header border-bottom">
        <svg class="bd-placeholder-img rounded mr-2" width="20" height="20" xmlns="http://www.w3.org/2000/svg"
             preserveAspectRatio="xMidYMid slice" focusable="false" role="img">
            <rect id="notify-rect" width="100%" height="100%" fill="#2ECC40"></rect>
        </svg>
        <strong id="notify-header" class="mr-auto">Success</strong>
        <!--        <small>11 mins ago</small>-->
        <button type="button" class="ml-2 mb-0 close" data-dismiss="toast" aria-label="Close"
                onclick="$('#notify').hide()">
            <span aria-hidden="true">×</span>
        </button>
    </div>
    <div id="notify-message" class="toast-body">
        Operation was successful finished
    </div>
</div>

<script src="./static/js/jquery-3.3.1.slim.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
<script src="./static/js/bootstrap-toolkit.js"></script>

<script src="/static/js/bootstrap.min.js"
        integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T"
        crossorigin="anonymous"></script>
<script src="/static/js/fabric.min.js"></script>
<!--<script src="lib/baselineView.js"></script>-->
<script>
    var baselines = {};
    const urlParams = new URLSearchParams(window.location.search);
    const unfoldTestId = urlParams.get('unfoldTestId');

    // waiting for the 'testinfo' element appearance
    // wrapped to the async function to not block the loop
    (async () => {
        if (unfoldTestId) {

            while (!document.querySelector(`.testinfo_${unfoldTestId}`)) {
                await new Promise(r => setTimeout(r, 200));
            }
            unfoldChecksWithScroll(unfoldTestId);
        }
    })();

    // console.log({urlParams})

    function unfoldChecksWithScroll(id) {
        // console.log({ UNFOLD: id });
        jQuery(`.testinfo_${id}`)[0].scrollIntoView(true);
        jQuery(`#testchecks_${id}`)
            .collapse('show');
        setTimeout((x) => {
            drawTestChecksPreviews(unfoldTestId);
        }, 200);
    }

</script>
<script src="../../../static/js/bootstrap-toolkit.js"></script>
<script src="../lib/commonEvents.js"></script>
</body>
</html>
