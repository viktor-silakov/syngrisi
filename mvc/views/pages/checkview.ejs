<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="icon" href="../../../static/icons/leaf_logo.svg">
    <link rel="stylesheet" href="./static/css/common.min.css">
    <link rel="stylesheet" href="./static/fa/css/all.min.css">
    <link rel="stylesheet" href="./static/css/colors.css">
    <link rel="stylesheet" href="./static/css/tabulator_bulma.css">
    <link rel="stylesheet" href="../../../static/font/bootstrap-icons.css">
    <script src="./static/js/jquery-3.3.1.slim.min.js"></script>
    <script src="./static/js/popper.min.js"></script>
    <script src="./static/js/bootstrap.min.js"></script>
    <script src="./static/js/fabric.min.js"></script>
    <script type="text/javascript" src="./static/js/tabulator.min.js"></script>
    <script src="../../../static/js/checkview/mainView.min.js"></script>
    <script src="../../../static/js/checkview/sideToSideView.min.js"></script>
    <script src="../../../static/js/checkview/helpers.min.js"></script>
    <script src="./static/js/indexHelper.min.js"></script>
    <script src="./static/js/gridHelpers.js"></script>
    <script src="./static/js/diffHelpers.min.js"></script>
    <script src="./static/js/ejs.min.js"></script>

    <title>Check - <%= check.name; %> [<%= check.status; %>]</title>
</head>
<body>
<div class="container-fluid pl-0 pr-0" style="background-color: #E5E5E5 !important;">

    <div name="page-head" class="row pb-0 bg-olive mr-0 sticky-top" style="margin-right: -16px; margin-left: -16px">
        <%- include('components/header_checkview') %>
    </div>

    <div class="row main-content pr-1 mr-3 ml-0">

        <div id="sidebar" name="sidebar" class="col-2 check-sidebar pl-2 ml-1 pt-3">
            <script>
                $(window)
                        .on('load', function () {
                            renderSameNamedChecks(<%- JSON.stringify(check) %>, <%- JSON.stringify(lastChecksWithSameName) %>);
                        });
            </script>
        </div>


        <div class="col-9" id="snapshot-and-info-wrapPer">
            <!--SNAPSHOT CANVAS-->
            <div class="row" id="snapshot-wrapper">
                <div name="shapshoot" id='snapshoot'
                     class="col-12 float-left w-100 border border-dark mb-3 pt-0 mr-0 ml-2 pl-0 pr-0 mt-3 mh-100 shadow">

                    <canvas class="snapshoot-canvas pb-1" id="2d">
                    </canvas>
                </div>
            </div>
            <!--CHECK DETAILS-->
            <div class="row" id="info-wrapper">
                <div class="col-12">
                    <div class="test-tabs">
                        <!--TABS-->
                        <ul class="nav nav-tabs" style="text-align: left;">
                            <li class="nav-item">
                                <a href="#check_info" class="nav-link active checkview-tab-links" data-toggle="tab"
                                   id="check_tab_link">Check
                                </a>
                            </li>
                            <li>
                                <a href="#baseline_info" class="nav-link checkview-tab-links" data-toggle="tab"
                                   id="baseline_tab_link">
                                    Baseline
                                </a>
                            </li>
                            <li>
                                <a href="#actual_info" class="nav-link checkview-tab-links" data-toggle="tab"
                                   id="actual_tab_link">Actual
                                </a>
                            </li>
                            <li>
                                <a href="#history" class="nav-link checkview-tab-links" data-toggle="tab"
                                   id="actual_tab_link">History
                                </a>
                            </li>
                        </ul>
                        <!--TAB CONTENT-->
                        <div class="tab-content mb-3" style="max-height: 550px;">

                            <div id="check_info" class="active tab-pane fade in show">
                                <div id="check-info-table" class="w-100"></div>
                            </div>

                            <div id="baseline_info" class="tab-pane fade in">
                                <div id="baseline-info-table" class="w-100"></div>
                            </div>

                            <div id="actual_info" class="tab-pane fade in">
                                <div id="actual-info-table" class="w-100"></div>
                            </div>
                            <div id="history" class="tab-pane fade in">
                                <div id="history-table" class="w-100"></div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

        </div>
    </div>

    <!--TOAST START-->
    <div id="notify" role="alert" aria-live="assertive" aria-atomic="true"
         class="fixed-bottom-right bg-light m-1 border rounded toast fade show"
         data-autohide="false"
         style="display: none"
    >
        <div class="toast-header border-bottom">
            <svg class="bd-placeholder-img rounded mr-2" width="20" height="20" xmlns="http://www.w3.org/2000/svg"
                 preserveAspectRatio="xMidYMid slice" focusable="false" role="img">
                <rect id="notify-rect" width="100%" height="100%" fill="#2ECC40"></rect>
            </svg>
            <strong id="notify-header" class="mr-auto">Success</strong>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close"
                    onclick="$('#notify').hide()">
                <span aria-hidden="true">×</span>
            </button>
        </div>
        <div id="notify-message" class="toast-body">
            Operation was successful finished
        </div>
    </div>
    <!--TOAST END-->
    <script>
        function toggleButtonAsPressed(id) {
            const button = document.getElementById(id);
            if (button.classList.contains('pressed-toolbar-button')) {
                return button.classList.remove('pressed-toolbar-button');
            }
            button.classList.add('pressed-toolbar-button');
        }

        // KEY BINDING
        document.addEventListener('keydown', function (event) {
            console.log(event.code);
            if (event.code === 'KeyA') {
                mainView.addIgnoreRegion({
                    name: 'ignore_rect',
                    strokeWidth: 0,
                });
            }
            if (event.code === 'Minus' || event.code === 'NumpadSubtract') {
                mainView.zoom(-15);
            }

            if (event.code === 'Equal' || event.code === 'NumpadAdd') {
                mainView.zoom(15);
            }

            if ((event.code === 'Delete') || (event.code === 'Backspace')) {
                mainView.removeActiveIgnoreRegions();
            }

            if ((event.code === 'KeyG')) {
                mainView.currentMode.toggle('pan');
                toggleButtonAsPressed('grab-wrapper');
            }

            if ((event.code === 'KeyD')) {
                mainView.toggleDiff({
                    filename: '<%= diffSnapshot?.filename %>',
                    id: '<%= diffSnapshot?.id %>',
                    name: '<%= diffSnapshot?.name %>',
                    createdDate: '<%= diffSnapshot?.formattedCreatedDate %>'
                });
            }

            if ((event.code === 'KeyS')) {
                mainView.sendIgnoreRegions('<%= baselineSnapshot.id %>', mainView.getRectData());
            }
        });

        var mainView = {};

        // wait for image loading, throw an error on timeout
        function createImageAndWaitForLoad(src) {
            const timeout = 90000;
            const img = new Image();
            img.src = src;
            return Promise.race([
                new Promise((resolve, reject) => {
                    img.onload = () => resolve(img);
                    img.onerror = (e) => reject(e);

                }),
                new Promise((_, reject) => {
                    setTimeout(() => {
                        return reject(`The image loading timeout is exceeded: '${timeout}' milliseconds, src: '${src}'`);
                    }, timeout)
                })
            ])
        }

        (async () => {

            let baselineImg = await createImageAndWaitForLoad('/snapshoots/<%= baselineSnapshot.filename || baselineSnapshot.id + '.png'; %>')

            <% const actual = actualSnapshot ? JSON.stringify(actualSnapshot) : null %>
            const actualObj = <%- actual %>;

            let actualImg = await createImageAndWaitForLoad(`/snapshoots/${actualObj.filename || actualObj.id + '.png'}`)

            // make visible the ≠ charset in header if baseline/actual resolution are different
            if ((baselineImg.height !== actualImg.height) || (baselineImg.width !== actualImg.width)) {
                const notEqualResolutionChar = document.getElementById('not-equal-resolution-char');
                notEqualResolutionChar.classList
                        .add('d-inline');
                notEqualResolutionChar.title = notEqualResolutionChar.title
                        + ` baseline: ${baselineImg.width}x${baselineImg.height}, actual: ${actualImg.width}x${actualImg.height}`
            }

            const largestSnapshotsHeight = (baselineImg.height > actualImg.height) ? baselineImg.height : actualImg.height;
            const largestSnapshotsWidth = (baselineImg.width > actualImg.width) ? baselineImg.width : actualImg.width;

            let coef = document.getElementById('snapshoot').clientWidth / largestSnapshotsWidth;

            let calculatedHeight = largestSnapshotsHeight * coef;

            document.getElementById('snapshoot').style.height = calculatedHeight + 'px';
            fabric.Object.prototype.objectCaching = false;

            mainView = new MainView(
                    {
                        canvasId: '2d',
                        canvasElementWidth: document.getElementById('snapshoot').clientWidth,
                        canvasElementHeight: document.getElementById('snapshoot').clientHeight,
                        url: baselineImg.src,
                        diffId: '<%= diffSnapshot?.id; %>',
                        <% if(actual) { %>
                        actual: <%- actual %>,
                        <% } %>
                    }
            );
            mainView.getSnapshotIgnoreRegionsDataAndDrawRegions('<%= baselineSnapshot.id; %>');
        })()

    </script>

    <script>
        function formTableData(item) {
            const tableData = [];
            for (const key of Object.keys(item)) {
                tableData.push({
                    property: key,
                    value: item[key]
                });
            }
            return tableData;
        }

        const snapshotsColumns = [
            {
                title: 'Property',
                field: 'property',
                width: '450',
                hozAlign: 'left',

            },
            {
                title: 'Value',
                field: 'value',
                hozAlign: 'left',
            },
        ];
        // CHECK TABLE
        const check = <%- JSON.stringify(check) %>;
        const checkData = formTableData(check);
        const compareResultObj = JSON.parse(check.result);
        compareResultObj.dimensionDifference = JSON.stringify(compareResultObj.dimensionDifference)

        const compareResult = formTableData(compareResultObj);
        const mergedCheckData = checkData.concat(compareResult);
        const checkTableData = mergedCheckData.filter((x) => {
            return !['result', '__v'].includes(x.property);
        });

        //create Tabulator on DOM element with id "example-table"
        var checkInfoTable = new Tabulator('#check-info-table', {
            data: checkTableData,
            layout: 'fitColumns',
            columns: snapshotsColumns,
        });

        // BASELINE TABLE
        const baselineSnapshot = <%- JSON.stringify(baselineSnapshot) %>;
        // const baselineTableData = formTableData(baselineSnapshot);
        var baselineInfoTable = new Tabulator('#baseline-info-table', {
            data: formTableData(baselineSnapshot),
            layout: 'fitColumns',
            columns: snapshotsColumns,
        });

        // ACTUAL TABLE
        const actualSnapshot = <%- JSON.stringify(actualSnapshot) %>;
        // const actualTableData = formTableData(actualSnapshot);
        var actualInfoTable = new Tabulator('#actual-info-table', {
            data: formTableData(actualSnapshot),
            layout: 'fitColumns',
            columns: snapshotsColumns,
        });

        // HISTORY
        async function getCheckHistory() {
            return await fetch(`/checkhistory/<%- check.id %>/`);
        }

        const historyColumns = [
            {
                title: 'Time',
                field: 'timestamp',
            },

            {
                title: 'Message',
                field: 'message',
                width: '550',
            },
            {
                title: 'User',
                field: 'user',
            },
            {
                title: 'Item Type',
                field: 'itemType',
            },
            {
                title: 'Operation',
                field: 'msgType',
            },
            {
                title: 'Level',
                field: 'level',
                // hozAlign: "left"
            },
            {
                title: 'Reference',
                field: 'ref',
            },
            {
                title: 'Scope',
                field: 'scope',
            },
        ];

        // "ref":"61941a32512d107490675a3e","timestamp":"2021-11-17T13:56:01.915Z"},"hostname":"TBSL00003"}'
        function transformHistory(arr) {
            const result = [];
            for (const item of arr) {
                item.user = item?.meta?.user;
                item.itemType = item?.meta?.itemType;
                item.msgType = item?.meta?.msgType;
                item.ref = item?.meta?.ref;
                item.scope = item?.meta?.scope;
                item.timestamp = new Date(item?.meta?.timestamp).toLocaleString();
                result.push(item);
            }
            return result;
        }

        var historyArr;
        getCheckHistory()
                .then(async (result) => {
                    historyArr = JSON.parse(await result.text());
                    var historyTable = new Tabulator('#history-table', {
                        data: transformHistory(historyArr),
                        layout: 'fitData',
                        columns: historyColumns,
                    });
                });
    </script>


    <script src="./static/js/bootstrap-toolkit.min.js"></script>
    <script src="./static/js/commonEvents.min.js"></script>
</body>
</html>
