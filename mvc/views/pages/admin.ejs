<!doctype html>
<html lang="en" xmlns:width="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="icon" href="./static/icons/leaf_logo.svg">
    <link rel="stylesheet" href="./static/fa/css/all.min.css">
    <link rel="stylesheet" href="./static/css/common.min.css">
    <link rel="stylesheet" href="./static/css/colors.css">
    <script src="./static/js/indexHelper.min.js"></script>
    <script src="./static/js/gridHelpers.min.js"></script>
    <script src="./static/js/ejs.min.js"></script>
    <script src="./static/js/moment.min.js"></script>
    <script src="./static/js/jquery-3.3.1.slim.min.js"></script>
    <title>Admin panel </title>
</head>
<body>
<div name="main" class="main container-fluid pl-3 pr-3 ml-0 mh-100">
    <div name="page-head" class="row pb-1 bg-olive sticky-top1 mr-0" style="margin-right: -16px; margin-left: -16px">
        <%- include('components/header') %>
    </div>
    <div class="all-table row mh-100">
        <!--   SIDEBAR    -->
        <div name="sidebar"
             class="sidebar col-2 pr-5 mh-100 bg-light border-top border-right border-silver float-left w-100 ml-0 mr-2"
             style="width: 100px">
            <div class="task-list row pl-2 pt-1 pr-0 bg-light text-secondary ">
                <div class="col pr-0">
                    <div id="admin" class="row pl-3 w-100 btn-light border-silver mt-1 mr-0 ">
                        <div class="col pr-1 pl-2 pb-1 ">
                            <a href="?task=users" class="small1 text-dark ">Users</a>
                        </div>
                    </div>

                    <div id="admin" class="row pl-3 w-100 btn-light border-silver mt-1 mr-0 ">
                        <div class="col pr-1 pl-2 pb-1 ">
                            <a href="?task=logs" class="small1 text-dark ">Logs</a>
                        </div>
                    </div>

                    <div id="admin" class="row pl-3 w-100 btn-light border-silver mt-1 mr-0 ">
                        <div class="col pr-1 pl-2 pb-1 ">
                            <a href="?task=tasks" class="small1 text-dark ">Tasks</a>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <!--   /SIDEBAR    -->

        <!--   USERS TABLE-->
        <div id="main-content" class="col pt-4 pl-3">
            <div class="container">
                <row id="users-table-end">

                </row>
                <div class="row d-flex justify-content-end align-items-end pt-4">
                    <!--                    <div class="col-10">-->
                    <!--                    </div>-->
                    <div class="col-10">
                        <input id="add-user" type="button" class="btn bg-olive text-light float-right "
                               style="visibility: hidden; font-size: 1.2em"
                               value="+">
                    </div>
                    <div class="col-1-2"></div>
                </div>
            </div>
        </div>
    </div>
    <!--   /USERS TABLE-->
</div>
</div>
<!--USER ROW TEMPLATE-->
<div id="user-row-template" class="row pt-1" style="opacity: 0">
    <div class="col-1-2 pl-0 pr-1">
        <input name="id" class="form-control form-control-sm" placeholder="id" readonly>
    </div>

    <div class="col-1 pl-0 pr-1">
        <input name="username" class="form-control form-control-sm" placeholder="Username">
    </div>
    <div class="col-1-2 pl-0 pr-1">
        <input name="firstName" class="form-control form-control-sm" placeholder="First Name">
    </div>
    <div class="col-1-2 pl-0 pr-1">
        <input name="lastName" class="form-control form-control-sm" placeholder="Last Name">
    </div>
    <div class="col-1 pl-0 pr-1">
        <select name="role" new-user-role="" class="form-select form-control form-control-sm" aria-label="role">
            <option value="user">user</option>
            <option value="reviewer">reviewer</option>
            <option value="admin">admin</option>
        </select>
    </div>
    <div class="col-1 pl-0 pr-1">
        <input name="password" class="form-control form-control-sm" placeholder="password" type="password">
    </div>
    <div class="col-2 pl-0 pr-1">
        <input name="apiKey" class="form-control form-control-sm" placeholder="api key" type="text" readonly>
    </div>
    <div class="col-2 pl-0 pr-1">
        <input name="updatedDate" class="form-control form-control-sm" placeholder="created date" type="text" readonly>
    </div>
    <div class="col-1 pl-0 pr-1 pl-2">
        <a type="button" class="send-new-user-button btn-sm border-0 bg-olive text-light" onclick="">
            <i class="fa fa-paper-plane"></i>
        </a>
    </div>
</div>
<!/--USER ROW TEMPLATE-->

<script>
    // search trigger on press enter
    document.getElementById('subheader-search')
            .addEventListener('keyup', function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    search();
                }
            });

    function paramsToObject(entries) {
        const result = {};
        for (const [key, value] of entries) { // each 'entry' is a [key, value] tupple
            result[key] = value;
        }
        return result;
    }

    function col(name, id, width, value, state = 'enabled', type = 'text') {
        const bg = (state === 'enabled') ? 'bg-white' : 'bg-gray';
        const ro = (state === 'disabled') ? 'readonly' : '';

        let col = [
            `\t<div class='col-${width} pl-0 pr-1'>`,
            `\t\t<input class='form-control form-control-sm ${bg}' id='input_${name}_${id}'` +
            `name='${name}' value="${value}" type='${type}' ${ro} state='${state}'>`,
            `\t\t</input>`,
            '\t</div>'
        ];
        return col.join('\n');
    }

    function renderTableHeader() {
        let row = [
            '<div class=\'row pt-1 small\'>',
            '<div class=\'col-1-2 p-2 pl-0 pr-1 border-left1\'>Id</div>',
            '<div class=\'col-1 p-2 pl-0 pr-1 border-left1\'>Username</div>',
            '<div class=\'col-1-2 p-2 pl-0 pr-1 border-left1\'>First Name</div>',
            '<div class=\'col-1-2 p-2 pl-0 pr-1 border-left1\'>Last Name</div>',
            '<div class=\'col-1 p-2 pl-0 pr-1 border-left1\'>Role</div>',
            '<div class=\'col-1 p-2 pl-0 pr-1 border-left1\'>Password</div>',
            '<div class=\'col-2 p-2 pl-0 pr-1 border-left1\'>Api Key</div>',
            '<div class=\'col-2 p-2 pl-0 pr-1 border-left2 border-right1\'>Updated</div>',
            '<div class=col-1></div>',
            '</div>'
        ];
        const result = row.join('\n');
        document.getElementById('users-table-end')
                .insertAdjacentHTML('beforebegin', result);
    }

    function renderUserRow(user) {
        let row = [`<div id='user_row_${user._id}' class='row pt-1'>`,
            col('id', user._id, '1-2', user._id, 'disabled'),
            col('username', user._id, '1', user.username, 'disabled'),
            col('firstName', user._id, '1-2', user.firstName),
            col('lastName', user._id, '1-2', user.lastName),
            `<div class="col-1 pl-0 pr-1">
                 <select name="role" username="${user.username}" class="form-select form-control form-control-sm" aria-label="role" id='input_${user.username}_${user._id}'\`>
                        <option value="${user.role}">${user.role}</option>
                        ${(user.role !== 'admin') ? '<option value="admin">admin</option>' : ''}
                        ${(user.role !== 'user') ? '<option value="user">user</option>' : ''}
                        ${(user.role !== 'reviewer') ? '<option value="reviewer">reviewer</option>' : ''}
                 </select>
             </div>`,
            col('password', user._id, '1', '', 'enabled', 'password'),
            col('apiKey', user._id, '2', user.apiKey, 'disabled'),
            col('updatedDate', user._id, '2', user.updatedDate, 'disabled')
        ];
        // console.log(user.username);
        if ((user.username !== 'Administrator') && (user.username !== 'Guest')) {
            row.push(`\t<div class='col-1 pl-2 pr-1'>
                <a id="update-user_btn_${user._id}" type="button" update-button-username="${user.username}" class="btn btn-sm bg-olive text-light border-0" title="Update the User" onclick="updateUser('user_row_${user._id}')">
                        <i class="fa fa-paper-plane"></i>
                </a>

                <a id="remove-user_btn_${user._id}" type="button" class="btn btn-sm bg-olive text-light border-0" title="Remove the User" onclick="removeUser('${user._id}')">
                        <i class="fas fa-trash fa-1x"></i>
                </a>
               </div>`);
        } else {
            row.push(`\t<div class='col-1 pl-0 pr-1'>
               </div>`);
        }
        row.push('</div>');
        const result = row.join('\n');
        document.getElementById('users-table-end')
                .insertAdjacentHTML('beforebegin', result);
    }

    function enableInput(evt) {
        evt.target.readOnly = false;
    }

    function disableInput(evt) {
        evt.target.readOnly = true;
    }

    function removeUser(id) {
        if (!confirmation()) return;
        const xhr = new XMLHttpRequest();
        const params = `id=${id}`;
        xhr.open('DELETE', `/users/${id}`, true);
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

        xhr.onload = function () {
            if (xhr.status === 200) {
                console.log('Success ' + id + '--' + xhr.responseText);
                showNotification('The user was removed');
                setTimeout(function () {
                    location.reload();
                }, 1000);
            } else {
                showNotification('Remove request was failing', 'Error');
                console.log('Request failed.  Returned status of ' + xhr.status);
            }
        };
        xhr.send(params);
    }

    function getInputValueByName(name, arr) {
        // console.log({name})
        return arr.filter(x => x.name === name)[0].value;
    }

    function createUser(rowId) {
        const select = Array.prototype.slice.call(document.getElementById(rowId)
                .getElementsByTagName('select'));
        const inputs = Array.prototype.slice.call(document.getElementById(rowId)
                .getElementsByTagName('input'))
                .filter(x => ((x.readOnly === false) || (x.name === 'apiKey')));
        // console.log({inputs})
        const params = {
            username: getInputValueByName('username', inputs),
            firstName: getInputValueByName('firstName', inputs),
            lastName: getInputValueByName('lastName', inputs),
            role: select[0].value,
            password: getInputValueByName('password', inputs),
            apiKey: getInputValueByName('apiKey', inputs),
        };

        const searchParams = objectToSearch(params);
        const xhr = new XMLHttpRequest();
        xhr.open('POST', `/users`, true);
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

        xhr.onload = function () {
            if (xhr.status === 200) {
                console.log(`Successful send user: '${params.username}'  resp: '${xhr.responseText}'`);
                showNotification('User created successfully');
                setTimeout(function () {
                    location.reload();
                }, 1000);
            } else {
                console.error(`Cannot create user: '${params.username}'  resp: '${xhr.responseText}'`);
                showNotification('Cannot create user', 'Error');
            }
        };
        xhr.send(searchParams);
    }

    function updateUser(rowId) {
        if (!confirmation()) return;
        const select = Array.prototype.slice.call(document.getElementById(rowId)
                .getElementsByTagName('select'));
        const inputs = Array.prototype.slice.call(document.getElementById(rowId)
                .getElementsByTagName('input'));
        // console.log({inputs})
        const params = {
            id: getInputValueByName('id', inputs),
            username: getInputValueByName('username', inputs),
            firstName: getInputValueByName('firstName', inputs),
            lastName: getInputValueByName('lastName', inputs),
            role: select[0].value,
            password: getInputValueByName('password', inputs),
            apiKey: getInputValueByName('apiKey', inputs),
        };

        const searchParams = objectToSearch(params);
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', `/users`, true);
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

        xhr.onload = function () {
            if (xhr.status === 200) {
                console.log(`Successful send user: '${params.username}'  resp: '${xhr.responseText}'`);
                showNotification('User updated successfully');
                setTimeout(function () {
                    location.reload();
                }, 1000);
            } else {
                console.error(`Cannot update user: '${params.username}'  resp: '${xhr.responseText}'`);
                showNotification('Cannot update user', 'Error');
            }
        };
        xhr.send(searchParams);
    }

    // clone user row
    $(document)
            .ready(function () {
                $('#add-user')
                        .on('click', function () {
                            const element = $('#user-row-template')
                                    .clone()[0];
                            element.style.opacity = 1;
                            element.id = uuidv4();
                            const sendLink = element.getElementsByClassName('send-new-user-button')[0];
                            sendLink.setAttribute('onclick', `createUser('${element.id}')`);
                            $('#users-table-end')
                                    .after(element);
                        });
            });

    window.onload = async function () {
        const searchObject = searchToObject(window.location.search);
        let data;
        if (searchObject) {
            if (searchObject.task === 'users') {
                // console.log(searchObject)
                data = {};
                data = JSON.parse(await getRequest(`/users`));
                renderTableHeader();
                for (const user of data) {
                    renderUserRow(user);
                }
                document.getElementById('add-user').style.visibility = '';
            } else {
                let taskHtml;
                let taskTemplate;
                taskTemplate = await getRequest(`../../../../static/ejs/admin_${searchObject.task}.ejs`);
                const mainContent = document.getElementById('main-content');

                taskHtml = '<div class="row">' + ejs.render(taskTemplate, {
                    data: data
                }, { delimiter: '?' }) + '</div>';
                mainContent.innerHTML = taskHtml;
            }
        }
    };

    function clearConsole() {
        document.getElementById('tasks-output').innerText = '';
    }

    function renderParams(taskName) {
        clearConsole();
        const allParams = {
            remove_empty_tests: `<label for="test">Test label</label>
                                 <input id="test" name="test">
                                 <input id="test1" name="test1">
                                 <a class="btn btn-sm btn-dark text-light" onclick="runAndRenderTask('remove_empty_tests');">Start</a>`,
            remove_empty_runs: ` <a class="btn btn-sm btn-dark text-light" onclick="runAndRenderTask('remove_empty_runs');">Start</a>`,
            migration_1_1_0: ` <a class="btn btn-sm btn-dark text-light" onclick="runAndRenderTask('${taskName}');">Start</a>`,
            remove_old_tests: `<label for="test">Remove older that (days): </label>
                               <input type="text" id="days" name="days" value="30"><br>
                               <label for="test">Only statistics (maybe slow): </label>
                               <input type="checkbox" id="statistics" name="statistics" ><br>
                               <a class="btn btn-sm btn-dark text-light" onclick="runAndRenderTask('remove_old_tests');">Start</a>
                                <a class="btn btn-sm btn-dark text-light" onclick="clearLogs();">Clear</a>`,
            remove_old_logs: `<label for="test">Remove older that (days): </label>
                               <input type="text" id="days" name="days" value="30"><br>
                               <label for="test">Only statistics: </label>
                               <input type="checkbox" id="statistics" name="statistics" ><br>
                               <a class="btn btn-sm btn-dark text-light" onclick="runAndRenderTask('remove_old_logs');">Start</a>
                               <a class="btn btn-sm btn-dark text-light" onclick="clearLogs();">Clear</a>`,
        };
        const form = document.getElementById('params-form');
        form.innerHTML = allParams[taskName];
    }

    function clearLogs() {
        const outputPre = document.getElementById('tasks-output');
        outputPre.innerText = '';
    }

    async function runAndRenderTask(taskName) {
        const form = document.getElementById('params-form');
        const formData = new FormData(form);

        const data = [...formData.entries()];
        const queryString = data
                .map(x => `${encodeURIComponent(x[0])}=${encodeURIComponent(x[1])}`)
                .join('&');
        console.log({ queryString });

        const path = (`/task_${taskName}?${queryString}`);
        console.log({ path });
        const outputPre = document.getElementById('tasks-output');

        // get output data by chunks
        let last_index = 0;
        const xhr = new XMLHttpRequest();
        xhr.open('GET', path);
        xhr.onprogress = function () {
            const curr_index = xhr.responseText.length;
            if (last_index === curr_index) return;
            const s = xhr.responseText.substring(last_index, curr_index);
            last_index = curr_index;
            console.log('PROGRESS:', s);
            outputPre.innerText += s;
            outputPre.scrollTop = outputPre.scrollHeight;
        };
        xhr.send();
    }
</script>

<!--NOTIFY BOX-->
<div id="notify" role="alert" aria-live="assertive" aria-atomic="true"
     class="fixed-bottom-right bg-light m-1 border rounded toast fade show"
     data-autohide="false"
     style="display: none"
>
    <div class="toast-header border-bottom">
        <svg class="bd-placeholder-img rounded mr-2" width="20" height="20" xmlns="http://www.w3.org/2000/svg"
             preserveAspectRatio="xMidYMid slice" focusable="false" role="img">
            <rect id="notify-rect" width="100%" height="100%" fill="#2ECC40"></rect>
        </svg>
        <strong id="notify-header" class="mr-auto">Success</strong>
        <!--        <small>11 mins ago</small>-->
        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close"
                onclick="$('#notify').hide()">
            <span aria-hidden="true">×</span>
        </button>
    </div>
    <div id="notify-message" class="toast-body">
        Operation was successful finished
    </div>
</div>

<script src="./static/js/popper.min.js"></script>
<script src="./static/js/bootstrap.min.js"></script>
<script src="./static/js/fabric.min.js"></script>
<script src="./static/js/bootstrap-toolkit.min.js"></script>
<script src="./static/js/commonEvents.min.js"></script>
</body>
</html>
